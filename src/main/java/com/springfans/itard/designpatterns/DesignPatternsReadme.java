package com.springfans.itard.designpatterns;

public class DesignPatternsReadme {
    /**
     * 设计模式
     * 本质是为了解决什么问题  举栗子
     * @from 《大话设计模式》
     * @description 工厂模式 => 固定模具（活字印刷）=> 须知 1.工厂 2.模具
     * @description 策略模式 => 商场促销策略 => 须知 1.策略
     */

    /**
     * @from 《Head First 设计模式》
     * @want 1.模式实质解决了什么问题
     * @want 2.何时使用该模式，为何使用
     * @want 3.何时不该使用该模式(避免对模式的狂热)
     * @want 4.如何把模式快速应用到自己的设计中
     * @want 5.模式是基于哪些面向对象原则设计出来的
     * @设计原则 1.抽出共性，封装变化
     * @设计原则 2.面向接口编程(实质是针对超类型编程)，而不是面向实现编程
     * @设计原则 3.多用组合，少用继承
     * @大师 思考系统以后需要的变化以及变化以后的原则
     * @pattern 策略模式：策略变变变，代码改的少
     *                    抽出oo共性，建立针对性的算法族，算法之间能相互切换,发实现可以动态使用算法，让算法变化独立于使用算法的客户
     *                    解决问题：后期算法定制变动多
     * @pattern 观察者模式：出版者+订阅者=观察者模式, 出版者和订阅者都是具体的，出版者和订阅者改变互不影响
     */
}
